import wixData from 'wix-data';
import wixUsers from 'wix-users';

$w.onReady(async function () {
  try {

    // Show inputs when taskButton1 is clicked
    $w("#taskButton1").onClick(() => {
      $w("#input1").show();
      $w("#input2").show();
      $w("#input3").show();
      $w("#input4").show();
      $w("#input5").show();
      $w("#input6").show();
      $w("#input7").show();
      $w("#input8").show();
      $w("#taskButton2").show();
    });

    // Submit task to backend
    $w("#taskButton2").onClick(async () => {
      let taskName = $w("#input1").value;
      let taskID = $w("#input2").value;
      let fieldID = $w("#input3").value;
      let requiredSkills = $w("#input4").value;
      let noOfWorkers = $w("#input5").value;
      let workerType = $w("#input6").value;
      let taskDuration = $w("#input7").value;
      let accountID = $w("#input8").value;

      console.log("📦 Sending to backend:", {
        Task_name: taskName,
        Field_ID: fieldID,
        Required_Skills: requiredSkills,
        Num_of_workers: noOfWorkers,
        Worker_type: workerType,
        Task_Time: taskDuration,
        account_id: accountID
      });
          
      //let accountID = 1;
      //let accountID = $w("#input8").value; //do I really need this?

      if (!taskName) {
        $w("#debugger1").text = "❌ Please enter a task name!";
        return;
      }

      try {
        const response = await fetch("https://api-production-1560.up.railway.app/tasks/", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            Task_name: taskName,
            Field_ID: fieldID,
            Required_Skills: requiredSkills,
            Num_of_workers: noOfWorkers,
            Worker_type: workerType,
            Task_Time: taskDuration,
            account_id: accountID
          })
        });

        if (response.ok) {
          $w("#debugger1").text = "✅ Added all inputted values to the database!";
          await loadTasks();
        } else {
          const errorDetails = await response.text();
          $w("#debugger1").text = `❌ Failed to add task. Server error: ${response.status}`;
          console.error("Error details:", errorDetails);
        }
      } catch (error) {
        $w("#debugger1").text = "❌ Error connecting to database!";
        console.error("Database Error:", error);
      }
    });

    // Initial task loading
    await loadTasks();

  } catch (error) {
    console.error("Fetch Error:", error);
  }
});


// Function to fetch tasks and update table
async function loadTasks() {
  try {
    // Fetch tasks from your API
    const response = await fetch("https://api-production-1560.up.railway.app/tasks/");

    if (!response.ok) {
      console.error("API Error:", response.status);
      return;
    }

    const data = await response.json();
    console.log("📋 Raw tasks from API:", data); // ✅ Raw log from API

    if (!Array.isArray(data)) {
      console.error("Expected an array from API, got:", data);
      return;
    }

    const formattedDataForTasksTable = data.map(task => ({
      Task_ID: task.Task_ID,
      Task_name: task.Task_name,
      Field_ID: task.Field_ID,
      Required_Skills: task.Required_Skills,
      Num_of_workers: task.Num_of_workers,
      Worker_type: task.Worker_type,
      Task_Time: task.Task_Time,
      account_id: task.account_id
    }));

    const formattedDataForProgressTable = data.map(task => ({
      Incomplete: task.Task_name,
      InProgress: "",
      Complete: ""
    }));

    console.log("✅ Formatted Data for tasks table:", formattedDataForTasksTable);

    // Rebind columns explicitly (ensuring Worker_type is correctly bound)
    $w("#tasksTable").columns = [
      { id: "Task_ID", dataPath: "Task_ID", label: "Task ID", type: "string" },
      { id: "Task_name", dataPath: "Task_name", label: "Task Name", type: "string" },
      { id: "Field_ID", dataPath: "Field_ID", label: "Field ID", type: "string" },
      { id: "Required_Skills", dataPath: "Required_Skills", label: "Skills", type: "string" },
      { id: "Num_of_workers", dataPath: "Num_of_workers", label: "Workers", type: "string" },
      { id: "Worker_type", dataPath: "Worker_type", label: "Worker Type", type: "string" }, // this matches the correct column key - not sure how to do this without code
      { id: "Task_Time", dataPath: "Task_Time", label: "Time", type: "string" },
      { id: "account_id", dataPath: "account_id", label: "Account", type: "string" }
    ];

    // Set the rows for the table
    $w("#tasksTable").rows = formattedDataForTasksTable;
    
    console.log("✅ Formatted Data for progress table:", formattedDataForProgressTable);

    $w("#tasksTable").rows = formattedDataForTasksTable;
    $w("#taskProgressTable").rows = formattedDataForProgressTable;

  } catch (error) {
    console.error("❌ Fetch Error:", error);
  }
}

// Store drawn locations
let locations = [];
let fieldCounter = 1;

// Function to save the data to external API and Wix database
async function saveToExternalAPI(fieldData) {
    try {
        console.log("📤 Sending to API:", fieldData);

        const response = await fetch('https://api-production-1560.up.railway.app/fields/', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(fieldData)
        });

        const responseBody = await response.text();
        console.log("📥 Raw API response:", responseBody);

        if (!response.ok) {
            throw new Error(`Failed to save to external API. Status: ${response.status}`);
        }

        return JSON.parse(responseBody);
    } catch (err) {
        console.error("❌ Error saving to external API:", err);
        return null;
    }
}

// Handle save location button click
$w.onReady(function () {
    $w("#btnSaveLocation").onClick(async () => {
        const cropType = $w("#cropTypeInput").value.trim();
        const fieldName = $w("#fieldNameInput").value.trim();
        const accountID = $w("#accountIdInput").value.trim();

        if (!cropType || !fieldName || !accountID) {
            console.error("❌ Missing crop type, field name, or account ID.");
            return;
        }

        if (locations.length === 0) {
            console.error("❌ No location drawn to save.");
            return;
        }

        const locationData = locations[locations.length - 1];
        const fieldPayload = {
            name: fieldName,
            crop_type: cropType,
            account_id: Number(accountID)
        };

        console.log("🔍 Field payload before sending to API:", fieldPayload);

        const savedField = await saveToExternalAPI(fieldPayload);

        if (!savedField || !savedField.Field_ID) {
            console.error("❌ No field_id returned from API.");
            return;
        }

        // Save to Wix database
        const wixRecord = {
            FieldID: savedField.Field_ID.toString(),
            AccountID: accountID.toString(),
            Coordinates: JSON.stringify(locationData.polygonCoordinates)
        };

        wixData.insert("Coordinates", wixRecord)
            .then(() => {
                console.log("✅ Location saved to Wix database:", wixRecord);

                // Send data to iframe to refresh the map
                $w("#htmlViewMap").postMessage(JSON.stringify({
                    action: "refresh",
                    data: [Object.assign({}, wixRecord, {
                        polygonCoordinates: locationData.polygonCoordinates
                    })]
                }));

                fieldCounter++;
            })
            .catch(err => {
                console.error("❌ Failed to save to Wix database:", err);
            });
    });

    // Handle messages from the Create Map iframe
    $w("#htmlCreateMap").onMessage((event) => {
        let received;
        try {
            received = JSON.parse(event.data);
        } catch (e) {
            console.error("❌ Invalid polygon data received:", e);
            return;
        }

        if (Array.isArray(received)) {
            received.forEach(loc => {
                if (Array.isArray(loc.polygonCoordinates)) {
                    locations.push(loc);
                }
            });
            console.log("✅ Received polygons from iframe:", locations);
        }
    });
});

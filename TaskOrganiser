// calls the following code when page is open...
$w.onReady(async function () {
  try {
    
    // logic for adding task details in
    // displays inputs when taskButton1 is clicked
    $w("#taskButton1").onClick(() => {
      $w("#input1").show();
      $w("#input2").show();
      $w("#input3").show();
      $w("#input4").show();
      $w("#input5").show();
      $w("#input6").show();
      $w("#input7").show();
      $w("#input8").show();
      $w("#taskButton2").show();
    });

    // assigns var names to each input in the boxes
    $w("#taskButton2").onClick(async () => {
      let taskName = $w("#input1").value;
      let taskID = $w("#input2").value;
      let fieldID = $w("#input3").value;
      let requiredSkills = $w("#input4").value;
      let noOfWorkers = $w("#input5").value;
      let workerType = $w("#input6").value;
      let taskDuration = $w("#input7").value;
      let accountID = $w("#input8").value;

      // ensures a task name is entered (otherwise the task organiser will be a struggle to use)
      if (!taskName) {
        $w("#debugger1").text = "Please enter a valid task name!";
        return;
      }

      try {
        // fetches the tasks URL
        const response = await fetch("https://api-production-1560.up.railway.app/tasks/", {
          method: "POST", // POST is used here because we want to create data and add it to the tasks table
          headers: {
            "Content-Type": "application/json"
          },
          // each var is assigned to their respective columns in the DB
          body: JSON.stringify({
            Task_name: taskName,
            Field_ID: fieldID,
            Required_Skills: requiredSkills,
            Num_of_workers: noOfWorkers,
            Worker_type: workerType,
            Task_Time: taskDuration,
            account_id: accountID
          })
        });

        // confirms to user that data has been added to 
        if (response.ok) {
          $w("#debugger1").text = "Added all inputted values to the database!";
          await loadTasks();
        } else {
          // helps user to debug
          const errorDetails = await response.text();
          $w("#debugger1").text = "Failed to add task. Server error: ${response.status}";
          console.error("Error details are:", errorDetails);
        }
        // else
      } catch (error) {
        $w("#debugger1").text = "Error connecting to database!";
        console.error("Database Error:", error);
      }
    });

    // logic for adding tasks to the Kanban board
    // assigns inputs to vars
    $w("#progressButton").onClick(async () => {
      let taskDropdown = $w("#taskDropdown").value;
      let progressDropdown = $w("#progressDropdown").value;

      // fetches the tasks URL
      try {
        const response = await fetch(`https://api-production-1560.up.railway.app/tasks/${taskDropdown}`, {
          method: "PATCH", // PATCH because we're not creating new data, instead we're changing the Status of the task
          headers: {
            "Content-Type": "application/json"
          },
          // the progressDropdown var is PATCHED to the Status attribute in the DB
          body: JSON.stringify({
            Status: progressDropdown
          })
        }); 

        // provdes confirmation for users
        if (response.ok) {
          $w("#debugger1").text = "Task status updated!";
          await loadTasks();

        // else for debugging
        } else {
          const errorDetails = await response.text();
          $w("#debugger1").text = `Failed to update status. Server error: ${response.status}`;
          console.error("Error details:", errorDetails);
        }
      } catch (error) {
        $w("#debugger1").text = "Error connecting to server!";
        console.error("Database Error:", error);
      }
    });

    // logic clears all the tasks from the tasks table
    $w("#clearTasksButton").onClick(async () => {
      try {
        const response = await fetch("https://api-production-1560.up.railway.app/tasks", {
          method: "DELETE" // DELETE used here because we're deleting data
        });

        // confirmation for users
        if (response.ok) {
          $w("#debugger1").text = "Tasks cleared successfully!";
          await loadTasks(); // reload table
        } else {
          // Debugging help
          const errorDetails = await response.text();
          console.error("Server Error:", errorDetails);
          $w("#debugger1").text = `Failed to clear tasks. Server responded with: ${response.status}`;
        }
      } catch (error) {
        console.error("Request Error:", error);
        $w("#debugger1").text = "Failed to connect to the server.";
      }
    });

    await loadTasks();

  // tells us if the loadTasks() was successful or not
  } catch (error) {
    console.error("Fetch Error:", error);
  }
});


// fetches tasks and updates the table
async function loadTasks() {
  try {

    // fetches data from tasks table using the URL and railway
    const response = await fetch("https://api-production-1560.up.railway.app/tasks/");

    if (!response.ok) {
      console.error("API Error:", response.status);
      return;
    }

    // data var is all data from the tasks table
    const data = await response.json();

    if (!Array.isArray(data)) {
      console.error("Expected an array from API, got:", data);
      return;
    }

    // these map()s formats the data to the correct attribute names in the table
    const formattedDataForTasksTable = data.map(task => ({
      Task_ID: task.Task_ID,
      Task_name: task.Task_name,
      Field_ID: task.Field_ID,
      Required_Skills: task.Required_Skills,
      Num_of_workers: task.Num_of_workers,
      Worker_type: task.Worker_type,
      Task_Time: task.Task_Time,
      account_id: task.account_id
    }));
    $w("#tasksTable").rows = formattedDataForTasksTable;
    const formattedDataForProgressTable = data.map(task => ({
      Incomplete: task.Status === 'Incomplete' ? task.Task_name : "",
      InProgress: task.Status === 'In Progress' ? task.Task_name : "",
      Complete: task.Status === 'Complete' ? task.Task_name : ""
    }));
    $w("#taskProgressTable").rows = formattedDataForProgressTable;
    const dropdownOptions = [
      { label: "Select a Task", value: "" },
      ...data.map(task => ({
        label: task.Task_name,
        value: String(task.Task_ID)
      }))
    ];
    $w("#taskDropdown").options = dropdownOptions;

    // these rebindings to the table columns prevent specific bugs from occuring (ie. Not displaying info in columns)
    $w("#taskProgressTable").columns = [
      { id: "Incomplete", dataPath: "Incomplete", label: "Incomplete", type: "string" },
      { id: "InProgress", dataPath: "InProgress", label: "In Progress", type: "string" },
      { id: "Complete", dataPath: "Complete", label: "Complete", type: "string" }
    ];  
    $w("#tasksTable").columns = [
      { id: "Task_ID", dataPath: "Task_ID", label: "Task ID", type: "string" },
      { id: "Task_name", dataPath: "Task_name", label: "Task Name", type: "string" },
      { id: "Field_ID", dataPath: "Field_ID", label: "Field ID", type: "string" },
      { id: "Required_Skills", dataPath: "Required_Skills", label: "Skills", type: "string" },
      { id: "Num_of_workers", dataPath: "Num_of_workers", label: "Workers", type: "string" },
      { id: "Worker_type", dataPath: "Worker_type", label: "Worker Type", type: "string" }, // this matches the correct column key - not sure how to do this without code
      { id: "Task_Time", dataPath: "Task_Time", label: "Time", type: "string" },
      { id: "account_id", dataPath: "account_id", label: "Account", type: "string" }
    ];

    // for debugging help
  } catch (error) {
    console.error("Fetch Error:", error);
  }
}
